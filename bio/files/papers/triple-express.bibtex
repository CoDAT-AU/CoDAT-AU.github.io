@article{Attie2017,
title = "Finite-state concurrent programs can be expressed succinctly in triple normal form ",
journal = "Information Processing Letters ",
volume = "123",
number = "",
pages = "8 - 13",
year = "2017",
note = "",
issn = "0020-0190",
doi = "http://dx.doi.org/10.1016/j.ipl.2017.02.004",
url = "http://www.sciencedirect.com/science/article/pii/S0020019017300315",
author = "Paul C. Attie",
keywords = "Concurrency",
keywords = "Finite-state concurrent programs",
keywords = "Expressive completeness ",
abstract = "Abstract I show that any finite-state shared-memory concurrent program P can be transformed into triple normal form: all variables are shared between exactly three processes, and the guards on actions are conjunctions of conditions over this triple-shared state. My result is constructive, since the transformation that I present is syntactic, and is easily implemented. If (1) action guards are in disjunctive normal form, or are short, i.e., of size logarithmic in the size of P, and (2) the number of shared variables is logarithmic in the size of P, then the triple normal form program has size polynomial in the size of P, and the transformation is computable in polynomial time. "
}














